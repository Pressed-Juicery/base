version: 2

jobs:
  build:
    docker:
      - image: docker:latest

    steps:
      - setup_remote_docker
      - run: apk add --update bash git openssh
      - checkout

      - run: .circleci/build.sh

      - save_cache:
          key: docker-cache-{{ .Revision }}
          paths:
            - ~/docker-cache

  test:
    docker:
      - image: docker:latest

    steps:
      - setup_remote_docker
      - run: apk add --update bash git openssh python py-pip
      - run: pip install docker-compose
      - checkout

      - restore_cache:
          key: docker-cache-{{ .Revision }}

      - run:
          name: Test installed dependencies
          command: |
            docker load < ~/docker-cache/image.tar
            docker run --rm reactioncommerce/base:latest sh -c \
              "METEOR_VERSION_ENV=$(exec env | grep METEOR_VERSION | tr 'METEOR_VERSION=' ' ' | xargs);
              APP_SOURCE_DIR=$(exec env | grep APP_SOURCE_DIR | tr 'APP_SOURCE_DIR=\' ' ' | xargs);
              APP_BUNDLE_DIR=$(exec env | grep APP_BUNDLE_DIR | tr 'APP_BUNDLE_DIR=' ' ' | xargs);
              REACTION_CLI_VERSION=$(exec reaction -v | grep Reaction | tr 'Reaction CLI:' ' ' | xargs);
              INSTALLED_METEOR_VERSION=$(exec meteor --version | tr 'Meteor' ' ' | xargs);
              echo \"$APP_SOURCE_DIR\";
              APP_SOURCE_DIR_OWNER=$(exec ls -ld $APP_SOURCE_DIR | awk '{print $3}');
              APP_BUNDLE_DIR_OWNER=$(exec ls -ld $APP_BUNDLE_DIR | awk '{print $3}');

              if [ $INSTALLED_METEOR_VERSION == $METEOR_VERSION_ENV ];
              then echo \"Meteor version confirmed\";
              else echo \"Meteor version not found\";
              fi"

  deploy:
    docker:
      - image: docker:latest

    steps:
      - setup_remote_docker
      - run: apk add --update bash git openssh
      - checkout

      - restore_cache:
          key: docker-cache-{{ .Revision }}

      - run: .circleci/deploy.sh

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - test:
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - deploy:
          requires:
            - build
            - test
          filters:
            # only run deploy on tags with format: v1.2.3
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]/
            # don't deploy on plain branch pushes
            branches:
              ignore: /.*/
